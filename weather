#!/usr/bin/env python3

"""
weather

Query Yahoo! Weather for the weather for the user.
"""

import datetime
import json
from sys import argv
import urllib.request
import urllib.parse

LOCATION = "Christchurch, New Zealand"
DEG = "c" # Get results in celcius.


def get_days(arguments):
    """ Work out what days were asked for from the arguments supplied.
    """
    today = (datetime.date.today().weekday() + 1) % 7

    day_abbr = {
        "Sun": 0,
        "Mon": 1,
        "Tue": 2,
        "Wed": 3,
        "Thu": 4,
        "Fri": 5,
        "Sat": 6,
    }

    for arg in arguments:
        if arg.capitalize() in day_abbr or arg[:3].capitalize() in day_abbr:
            yield day_abbr[arg[:3].capitalize()]
        elif arg.lower() == 'today':
            yield today
        elif arg.lower() == 'tomorrow':
            yield (today + 1) % 7


def replace_text(condition):
    """ Tidy up the phrasing in the text. """
    words = condition.split()
    if words[0].lower() == "am":
        words = words[1:] + ["in", "the", "morning"]
    elif words[0].lower() == "pm":
        words = words[1:] + ["in", "the", "afternoon"]
    for i in range(len(words)):
        if '/' in words[i]:
            words[i] = ', '.join(words[i].split('/'))
    return " ".join(words)


def extract_info(data):
    """ Read the JSON response and generate useful output. """
    json_data = json.loads(str(data.read(), encoding='utf8'))
    json_data = json_data['query']['results']['channel']['item']
    return (json_data['condition'],
            (day for day in json_data['forecast']))


def get_weather_data(location, unit):
    """ Send a request to the Yahoo! Weather API. """
    query = ("select * from weather.forecast "
             "where woeid in (select woeid from geo.places(1) "
             "where text='{location}') and u='{unit}'").format(
        location=location, unit=unit)
    url = ("https://query.yahooapis.com/"
           "v1/public/yql?q={query}&format=json").format(
        query=urllib.parse.quote(query))
    return urllib.request.urlopen(url)


def nice_print(data):
    """ Format the data into a table row. """
    data['text'] = replace_text(data['text'])
    format_string = " {day:<3}  {high:>3}  {low:>3}  {text}"
    print(format_string.format(**data))


def print_header():
    """ Print the table header row. """
    print(" Day   Hi   Lo  Conditions")
    print("-------------------------------")


def print_now(now):
    """ Show infor for right now. """
    if now['text'] == 'Unknown':
        print("Currently {} degrees.".format(now['temp']))
    else:
        format_string = "Currently {} degrees, {}."
        print(format_string.format(now['temp'], replace_text(now['text'])))


def print_table(data, days):
    """ Print the data for the requested days (or all days) using the data. """
    if len(days) > 0:
        data = list(data)
        today = (datetime.date.today().weekday() + 1) % 7
        to_show = get_days(argv[1:])
        for day in days:
            try:
                nice_print(data[(day - today) % 7])
            except IndexError as e:
                print("Weather cannot see that far into the future.")
    else:
        for day in future:
            nice_print(day)


if __name__ == "__main__":
    data = get_weather_data(LOCATION, DEG)
    now, future = extract_info(data)
    days = list(get_days(argv[1:]))

    if not ('now' in argv and len(argv) == 2):
        print_header()
        print_table(future, days)

    # Chech that either we're showing everything, or now, and not 'not now'
    if (len(argv) == 1 or 'now' in argv) and "-now" not in argv:
        print_now(now)

